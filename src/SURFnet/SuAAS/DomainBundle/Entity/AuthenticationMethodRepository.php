<?php

namespace SURFnet\SuAAS\DomainBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AuthenticationMethodRepository
 * @package SURFnet\SuAAS\DomainBundle\Entity
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Daan van Renterghem <dvrenterghem@ibuildings.nl>
 */
class AuthenticationMethodRepository extends EntityRepository
{
    public function getTokenOfTypeForUser($type, User $user)
    {
        return $this->createQueryBuilder('t')
            ->where('t.owner = :user')
            ->andWhere('t INSTANCE OF SURFnet\SuAAS\DomainBundle\Entity\\' . $type)
            ->setParameter('user', $user)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function getTokenCountForUser(User $user)
    {
        return $this->createQueryBuilder('t')
            ->select('COUNT(t.id)')
            ->where('t.owner = :user')
            ->setParameter('user', $user)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function removeForUser(User $user)
    {
        $this->createQueryBuilder('t')
            ->delete()
            ->where('t.owner = :user')
            ->setParameter('user', $user)
            ->getQuery()
            ->execute();
    }

    public function findByEmailCode($code)
    {
        return $this->createQueryBuilder('t')
            ->where('t.emailToken = :code')
            ->setParameter('code', $code)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function hasPendingMollieOTP(Mollie $token)
    {
        $dql = "
            SELECT
                COUNT(o.id) cnt
            FROM
                SURFnetSuAASDomainBundle:MollieOTP o
            WHERE
            (   o.mollieToken = :token
            AND o.confirmedAt IS NULL
            )
        ";

        $result = $this
            ->getEntityManager()
            ->createQuery($dql)
            ->setParameter('token', $token)
            ->getSingleScalarResult();

        return (bool) $result;
    }

    public function findMollieOTP(Mollie $token, $otp)
    {
        $dql = "
            SELECT
                o
            FROM
                SURFnetSuAASDomainBundle:MollieOTP o
            WHERE
            (   o.mollieToken = :token
            AND o.confirmedAt IS NULL
            AND o.otp = :otp
            )
        ";

        return $this
            ->getEntityManager()
            ->createQuery($dql)
            ->setParameters(
                array(
                    'token' => $token,
                    'otp' => strtolower($otp) // yes, case-insensitive was requested
                )
            )
            ->getOneOrNullResult();
    }
}
